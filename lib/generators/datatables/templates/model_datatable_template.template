class <%= model.camelcase %>Datatable < ApplicationDatatable
  delegate :edit_<%= model.singularize.downcase %>_path, to: :@view

  private

  <%- if options.doc? -%>
  # Loop through memoized collection and build the columns.
  # If extracting from a view, be sure to add delegates
  # and to also clean up and inject each column into the column var.
  # Also, if you have multiple items (links) in a single column, you
  # will need to create a separate variable and join them accordingly
  # when pushing to the column array
  <%- end -%>
  def data
    <%= model.downcase.pluralize %>.map do |<%= model.downcase.singularize.underscore %>|
      [].tap do |column|
        <% model.singularize.camelcase.classify.constantize.column_names.each do |c| %>
        column << <%= "#{model.downcase.singularize}.#{c}" %>
        <% end %>

        links = []
        column << link_to("<span class='glyphicon glyphicon-th-list'></span>".html_safe, <%= model.singularize.downcase %>)
        column << link_to("<span class='glyphicon glyphicon-edit'></span>".html_safe, edit_<%= model.singularize.downcase %>_path(<%= model.singularize.downcase %>))
        column << link_to("<span class='glyphicon glyphicon-remove'></span>".html_safe, <%= model.singularize.downcase %>, method: :delete, data: { confirm: 'Tem certeza?' })
      end
    end
  end

  <%- if options.doc? -%>
  # Returns the count of records.
  <%- end -%>
  def count
    <%= model.singularize.camelcase %>.count
  end

  def total_entries
    <%= model.downcase.pluralize.underscore %>.total_count
    # will_paginate
    # <%= model.downcase.pluralize.underscore %>.total_entries
  end

  def <%= model.downcase.pluralize.underscore %>
    @<%= model.downcase.pluralize.underscore %> ||= fetch_<%= model.downcase.pluralize.underscore %>
  end

  def fetch_<%= model.downcase.pluralize.underscore %>
    search_string = []
    columns.each do |term|
      search_string << "lower(#{term}::text) like lower(:search)"
    end

    # will_paginate
    # <%= model.downcase.pluralize.underscore %> = <%= model.singularize.camelcase %>.page(page).per_page(per_page)
    <%= model.downcase.pluralize.underscore %> = <%= model.singularize.camelcase %>.order("#{sort_column} #{sort_direction}")
    <%= model.downcase.pluralize.underscore %> = <%= model.downcase.pluralize.underscore %>.page(page).per(per_page)
    <%= model.downcase.pluralize.underscore %> = <%= model.downcase.pluralize.underscore %>.where(search_string.join(' or '), search: "%#{params[:search][:value]}%")
  end

  <%- if options.doc? -%>
  # The columns needs to be the same list of searchable items and IN ORDER that they will appear in Data.
  <%- end -%>
  def columns
    %w<%= model.singularize.camelcase.classify.constantize.columns.map(&:name).to_s.gsub('"', '').gsub('[','(').gsub(']',')').gsub(',', '') %>
  end
end
